import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:workshop_management_system/Models/ScheduleModel.dart';

class ScheduleController {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // Function to fetch schedules from Firestore
  Stream<List<Schedule>> getSchedules() {
    return _firestore.collection('WorkshopSchedule').snapshots().map(
      (snapshot) {
        return snapshot.docs.map((doc) {
          return Schedule.fromFirestore(doc);
        }).toList();
      },
    );
  }

  // Add new schedule to Firestore
  Future<void> addSchedule(Schedule schedule) async {
    try {
      await _firestore.collection('WorkshopSchedule').add(schedule.toJson());
      debugPrint('Schedule added successfully');
    } catch (e) {
      debugPrint('Failed to add schedule: $e');
      rethrow;
    }
  }

  // ASSIGN WORKSHOP OWNER ID TO SCHEDULE
  // Delete a schedule by its document ID in Firestore
  Future<void> deleteSchedule(String docId) async {
    try {
      // Deleting by document ID (auto-generated by Firestore)
      await _firestore.collection('WorkshopSchedule').doc(docId).delete();
      debugPrint('Schedule deleted successfully');
    } catch (e) {
      debugPrint('Failed to delete schedule: $e');
      rethrow;
    }
  }

  //function to get the schedule based on the id
  Future<Schedule?> getScheduleById(String docId) async {
    final doc = await FirebaseFirestore.instance
        .collection('WorkshopSchedule')
        .doc(docId)
        .get();
    if (doc.exists) {
      return Schedule.fromMap(doc.data()!, doc.id);
    }
    return null;
  }

  //function to edit schedule based on id
  Future<void> editSchedule(Schedule schedule) async {
    if (schedule.docId != null) {
      await FirebaseFirestore.instance
          .collection('WorkshopSchedule')
          .doc(schedule.docId)
          .update(schedule.toJson());
    }
  }

  // WAIT FOR FOREMEN USE CASE 
  // TUNGGU AINA BUAT FUNCTION NI
  // LATER ASSIGN THE SCHEDULE TO FOREMAN
  Future<void> acceptSchedule(String docId) async {
    try {
      await FirebaseFirestore.instance
          .collection('WorkshopSchedule')
          .doc(docId)
          .update({'status': 'accepted'});
      debugPrint('Schedule accepted successfully');
    } catch (e) {
      debugPrint('Failed to accept schedule: $e');
      rethrow;
    }
  }

  Stream<List<Schedule>> getAcceptedSchedules() {
    return _firestore.collection('WorkshopSchedule').snapshots().map(
      (snapshot) {
        return snapshot.docs.map((doc) {
          return Schedule.fromFirestore(doc);
        }).toList();
      },
    );
  }
}
